#include <GL/glew.h>
#include <GLFW/glfw3.h>
// #include <GL/glut.h>
#include <vector>
#include <iostream>
#include <cmath>
using namespace std; 

int edgeTable[256]={
0x0  , 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
0x190, 0x99 , 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
0x230, 0x339, 0x33 , 0x13a, 0x636, 0x73f, 0x435, 0x53c,
0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
0x3a0, 0x2a9, 0x1a3, 0xaa , 0x7a6, 0x6af, 0x5a5, 0x4ac,
0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
0x460, 0x569, 0x663, 0x76a, 0x66 , 0x16f, 0x265, 0x36c,
0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff , 0x3f5, 0x2fc,
0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55 , 0x15c,
0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc ,
0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
0xcc , 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
0x15c, 0x55 , 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
0x2fc, 0x3f5, 0xff , 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
0x36c, 0x265, 0x16f, 0x66 , 0x76a, 0x663, 0x569, 0x460,
0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa , 0x1a3, 0x2a9, 0x3a0,
0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33 , 0x339, 0x230,
0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99 , 0x190,
0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0   };

int triTable[256][16] =
{{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},
{3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1},
{3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1},
{3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},
{9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
{2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},
{8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
{4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},
{3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},
{1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},
{4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1},
{4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
{5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1},
{2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1},
{9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
{0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
{2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1},
{10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1},
{5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},
{5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},
{9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1},
{0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1},
{1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},
{10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},
{8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1},
{2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1},
{7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},
{2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},
{11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1},
{5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1},
{11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},
{11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},
{9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1},
{5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1},
{2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
{5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},
{6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},
{3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1},
{6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1},
{5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},
{1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
{10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1},
{6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},
{8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},
{7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1},
{3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
{5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1},
{0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1},
{9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},
{8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1},
{5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1},
{0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},
{6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},
{10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1},
{10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1},
{8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1},
{1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},
{0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1},
{10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},
{3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},
{6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},
{9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1},
{8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1},
{3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1},
{6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
{0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1},
{10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1},
{10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},
{2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},
{7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1},
{7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1},
{2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},
{1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},
{11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1},
{8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1},
{0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},
{7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
{10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
{2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
{6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},
{7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1},
{2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1},
{1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},
{10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1},
{10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1},
{0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1},
{7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1},
{6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},
{8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},
{9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1},
{6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1},
{4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1},
{10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},
{8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1},
{0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1},
{1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},
{8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},
{10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},
{4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1},
{10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
{5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
{11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},
{9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
{6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1},
{7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},
{3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},
{7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1},
{3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1},
{6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},
{9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},
{1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1},
{4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1},
{7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},
{6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},
{3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},
{0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1},
{6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1},
{0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},
{11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},
{6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1},
{5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1},
{9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},
{1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},
{1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1},
{10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1},
{0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},
{5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1},
{10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1},
{11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},
{9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},
{7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1},
{2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1},
{8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1},
{9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},
{9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},
{1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1},
{9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1},
{9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},
{5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},
{0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1},
{10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1},
{2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},
{0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},
{0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},
{9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1},
{5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},
{3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},
{5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1},
{8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1},
{0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},
{9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
{0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1},
{1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1},
{3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1},
{4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},
{9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},
{11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1},
{11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1},
{2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1},
{9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},
{3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},
{1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1},
{4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1},
{4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},
{0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
{3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1},
{3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},
{0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},
{9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1},
{1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}};



typedef struct{
	double x, y, z;
	double vx, vy, vz;
	double ax, ay, az;
	double d;
    double p;
} Point;


#define WIDTH 800
#define HEIGHT 800

void key_callback(GLFWwindow *window,int key,int sccncode,int action,int mode);  
void mouse_move_callback(GLFWwindow* window, double xpos, double ypos);
void mouse_click_callback(GLFWwindow* window, int button, int action, int mods);
void scroll_callback(GLFWwindow* windowm, double x, double y);
void display();
void setEvents(GLFWwindow*);
void calculator();
void draw_point();
void init();
void cubepoint();
void cubecount(int, int, int, float[], float[][3]);
void draw_face();

//旋转全局数据
GLfloat angle_rl = 0;
GLfloat angle_ud = 0;
//style全局数据
int sstyle = 0;
//平移向量
GLfloat tx = 0;
GLfloat ty = 0;
//移动速度
GLfloat moveX = 0;
GLfloat moveY = 0;
//鼠标位置
GLfloat mouseX = 0;
GLfloat mouseY = 0;
//是否正在拖拽
bool clicking = false;
//缩放倍数
int ssize = WIDTH/2;


//网格边界
#define LEDGE -40
#define REDGE 40
#define LEVEL 50
//点数量
#define xnum 16
#define ynum 16
#define znum 30
//点坐标
Point point[xnum][ynum][znum];
Point density[LEVEL+1][LEVEL+1][LEVEL+1];

#define G -70.0
#define H 2.0
#define P0 1.0
#define K 50.0
#define PI 3.14159
#define M 1.0
#define U 200.0

#define BALL 3
#define PP 0.1

float t = 0.1;



int main(int argc,char **argv)  
{  
    glfwInit();
    glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);  

    //初始化窗口
    GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, "fluid", NULL, NULL);  
    glfwMakeContextCurrent(window);

    //注册回调函数
    setEvents(window);

    //初始化glew
    glewExperimental = GL_TRUE;  
    glewInit();  

    //激活深度测试
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);
    init();
    //背景色设置
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
    while (!glfwWindowShouldClose(window)){
        // getchar();

        //更新点位置
        calculator();
        cubepoint();

        display();
        glfwSwapBuffers(window);
        glfwPollEvents();

    }
    glfwTerminate();  
    return 0;  

}  

//键盘事件
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode)  
{  
    //退出
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)  {  
        glfwSetWindowShouldClose(window, GL_TRUE);  
    }
    // //旋转
    // else if (key == GLFW_KEY_LEFT && action == GLFW_PRESS){   
    //     angle_rl -= 1;
    // }
    // else if (key == GLFW_KEY_RIGHT && action == GLFW_PRESS){
    //     angle_rl += 1;
    // }
    // else if (key == GLFW_KEY_UP && action == GLFW_PRESS){
    //     angle_ud -= 1;
    // }
    // else if (key == GLFW_KEY_DOWN && action == GLFW_PRESS){
    //     angle_ud += 1;
    // }
    //切换style
    else if (key == GLFW_KEY_SPACE && action == GLFW_PRESS){
        sstyle = (sstyle+1)%3;
    }
    
}  

//实时记录鼠标位置及移动趋势
void mouse_move_callback(GLFWwindow* window, double xpos, double ypos){
    // //记录鼠标移动趋势——通过当前坐标与上一坐标计算
    // moveX = mouseX - xpos;
    // moveY = mouseY - ypos;
    // //记录鼠标当前坐标
    // mouseX = xpos;
    // mouseY = ypos;
    return;
}
//通知全局鼠标是否按下（即拖拽中）
void mouse_click_callback(GLFWwindow* window, int button, int action, int mods){
    // if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_PRESS){
    //     clicking = true;
    // }
    // if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_RELEASE){
    //     clicking = false;
    // }
    return;
}

void scroll_callback (GLFWwindow* window, double xoffset, double yoffset)
{
    // ssize += 5*yoffset;
    return;
}


void setEvents(GLFWwindow * window){
    glfwSetKeyCallback(window, key_callback);   //键盘事件
    glfwSetMouseButtonCallback(window, mouse_click_callback);   //鼠标按键
    glfwSetCursorPosCallback(window, mouse_move_callback);  //鼠标移动
    glfwSetScrollCallback(window, scroll_callback); //鼠标滚轮
}

void display(){
    //清缓存
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    //保存上一个变换矩阵，本项目中不用
    // glPushMatrix();

    //加载单位矩阵
    glLoadIdentity();
    //透视矩阵
    gluPerspective(60.0, 1, REDGE, LEDGE);
    //摄像矩阵
    if (sstyle == 0)
        gluLookAt(150, 0, 0, 0, 0, 0, 0, 0, 1);
    else if (sstyle == 1)
        gluLookAt(100, 100, 0, 0, 0, 0, 0, 0, 1);
    else
        gluLookAt(0, 0, 100, 0, 0, 0, 0, 1, 0);
    cout<<"w"<<endl;
    //根据模式来进行绘制
    glColor3f(0.9, 0.6, 0.6);
    glBegin(GL_TRIANGLES);
        glVertex3f(LEDGE,LEDGE,LEDGE);
        glVertex3f(LEDGE,-LEDGE,LEDGE);
        glVertex3f(-LEDGE,-LEDGE,LEDGE);
        
        glVertex3f(-LEDGE,-LEDGE,LEDGE);
        glVertex3f(-LEDGE,LEDGE,LEDGE);
        glVertex3f(LEDGE,LEDGE,LEDGE);
    glEnd();

    glColor3f(0.0f, 0.0f, 0.0f);
    draw_point();
    glColor3f(0.5f, 0.7f, 1.0f);
    draw_face();

    // glPopMatrix();
}

void init(){
    double s = H/2;
    double begin = -(int)s*xnum/2;
    for (int i=0; i<xnum; i++){
        for (int j=0; j<ynum; j++){
            for (int k=0; k<znum; k++){
                point[i][j][k].x = begin+s*i;
                point[i][j][k].y = begin+s*j;
                point[i][j][k].z = begin+s*k-30;
                point[i][j][k].vx = 0;
                point[i][j][k].vy = 0;
                point[i][j][k].vz = 0;
                
            }
        }
    } 
    for (int i=0; i<=LEVEL; i++){
        for (int j=0; j<=LEVEL; j++){
            for (int k=0; k<=LEVEL; k++){
                density[i][j][k].x = LEDGE - i*((float)LEDGE/LEVEL)*2;
                density[i][j][k].y = LEDGE - j*((float)LEDGE/LEVEL)*2;
                density[i][j][k].z = LEDGE - k*((float)LEDGE/LEVEL)*2;
                // cout<<density[i][j][k].z<<endl;
            }
        }
    }
}

void draw_point(){
    for (int i=0; i<xnum; i++){
        for (int j=0; j<ynum; j++){
            for (int k=0; k<znum; k++){
                glPointSize(2.0f);
                glBegin(GL_POINTS);
                glVertex3f(point[i][j][k].x, point[i][j][k].y, point[i][j][k].z);
                glEnd();
            }
        }
    }
}

void calculator(){
    float kd = (float)315/(64*PI*pow(H,9));
    cout<<"a";
    for (int i=0; i<xnum; i++){
        for (int j=0; j<ynum; j++){
            for (int k=0; k<znum; k++){
                // cout<<point[i][j][k].x<<" ";
                // cout<<point[i][j][k].y<<" ";
                // cout<<point[i][j][k].z<<endl;
                point[i][j][k].d = 0;
                for (int a = 0; a<xnum; a++) {
                    for (int b = 0; b<ynum; b++) {
                        for (int c = 0; c<znum; c++){
                            float d = (point[i][j][k].x - point[a][b][c].x)*(point[i][j][k].x - point[a][b][c].x) + (point[i][j][k].y - point[a][b][c].y)*(point[i][j][k].y - point[a][b][c].y) + (point[i][j][k].z - point[a][b][c].z)*(point[i][j][k].z - point[a][b][c].z);
                            if (d<H*H)
                            {
                                point[i][j][k].d += M * 315 * (H*H - d)*(H*H - d)*(H*H - d) / (64 * PI*H*H*H*H*H*H*H*H*H); 
                            }   
                        }
                    }
                }
			    point[i][j][k].p = K*(point[i][j][k].d - P0);
            }
        }
    }

    cout<<"b";
    for (int i=0; i<xnum; i++){
        for (int j=0; j<ynum; j++){
            for (int k=0; k<znum; k++){
    			double yalix = 0, niandux =  0, yaliy = 0, nianduy = 0, yaliz = 0, nianduz = 0;
                for (int a=0; a<xnum; a++){
                    for (int b=0; b<ynum; b++){
                        for (int c=0; c<znum; c++){
                            float d = (point[i][j][k].x - point[a][b][c].x)*(point[i][j][k].x - point[a][b][c].x) + (point[i][j][k].y - point[a][b][c].y)*(point[i][j][k].y - point[a][b][c].y) + (point[i][j][k].z - point[a][b][c].z)*(point[i][j][k].z - point[a][b][c].z);
                            if (i!=a || j!=b || k!=c) {
                                float d = (point[i][j][k].x - point[a][b][c].x)*(point[i][j][k].x - point[a][b][c].x) + (point[i][j][k].y - point[a][b][c].y)*(point[i][j][k].y - point[a][b][c].y) + (point[i][j][k].z - point[a][b][c].z)*(point[i][j][k].z - point[a][b][c].z);
                                if (d<H*H)
                                {
                                    yaliz += (((point[i][j][k].p + point[a][b][c].p)* (point[i][j][k].z - point[a][b][c].z) * ((H - sqrt(d))*(H - sqrt(d))) / (sqrt(d)  * (2 * point[i][j][k].p*point[a][b][c].p))));
                                    nianduz += (point[a][b][c].vz - point[i][j][k].vz)  * (H - sqrt(d)) / (point[i][j][k].p*point[a][b][c].p);

                                    yalix += (((point[i][j][k].p + point[a][b][c].p)* (point[i][j][k].x - point[a][b][c].x) * ((H - sqrt(d))*(H - sqrt(d))) / (sqrt(d)  * (2 * point[i][j][k].p*point[a][b][c].p))));
                                    niandux += (point[a][b][c].vx - point[i][j][k].vx)  * (H - sqrt(d)) / (point[i][j][k].p*point[a][b][c].p);

                                    yaliy += (((point[i][j][k].p + point[a][b][c].p)* (point[i][j][k].y - point[a][b][c].y) * ((H - sqrt(d))*(H - sqrt(d))) / (sqrt(d)  * (2 * point[i][j][k].p*point[a][b][c].p))));
                                    nianduy += (point[a][b][c].vy - point[i][j][k].vy)  * (H - sqrt(d)) / (point[i][j][k].p*point[a][b][c].p);

                                }
                            }
                        }
                    }
                }
                point[i][j][k].ax += 0.5 * M * 45 * yalix / (PI*H*H*H*H*H*H) + 0.2 * M * 45 * U*niandux / (PI*H*H*H*H*H*H);
                point[i][j][k].ay += 0.5 * M * 45 * yaliy / (PI*H*H*H*H*H*H) + 0.2 * M * 45 * U*nianduy / (PI*H*H*H*H*H*H);
                point[i][j][k].az += 0.5 * M * 45 * yaliz / (PI*H*H*H*H*H*H) + 0.2 * M * 45 * U*nianduz / (PI*H*H*H*H*H*H);


            }
		}
	}

    cout<<"c";
	float diff;
	float ax, ay, az;
    // glBegin(GL_TRIANGLE_STRIP);
	for (int i = 0; i<xnum; i++) {
		for (int j = 0; j<ynum; j++) {
            for (int k=0; k<znum; k++) { 
                ax = point[i][j][k].ax;
                ay = point[i][j][k].ay;
                az = point[i][j][k].az;
                az += G;
                point[i][j][k].vx = point[i][j][k].vx + ax*t;
                point[i][j][k].vy = point[i][j][k].vy + ay*t;
                point[i][j][k].vz = point[i][j][k].vz + az*t;


                point[i][j][k].x += point[i][j][k].vx*t;
                point[i][j][k].y += point[i][j][k].vy*t;
                point[i][j][k].z += point[i][j][k].vz*t;

                if(point[i][j][k].z < LEDGE){
                    cout<<("BOOM");
                    point[i][j][k].z = LEDGE;
                    point[i][j][k].az = point[i][j][k].vz*(-2);
                    point[i][j][k].vz = point[i][j][k].vz + az*t;
                }
            }
		}
	}
}







void cubepoint(){
    for (int i=0; i<=LEVEL; i++){
        for (int j=0; j<=LEVEL; j++){
            for (int k=0; k<=LEVEL; k++){
                density[i][j][k].d = 0;
                for (int a = 0; a<xnum; a++) {
                    for (int b = 0; b<ynum; b++) {
                        for (int c = 0; c<znum; c++){
                            float d = (density[i][j][k].x - point[a][b][c].x)*(density[i][j][k].x - point[a][b][c].x) + (density[i][j][k].y - point[a][b][c].y)*(density[i][j][k].y - point[a][b][c].y) + (density[i][j][k].z - point[a][b][c].z)*(density[i][j][k].z - point[a][b][c].z);
                            if (d<BALL*BALL)
                            {
                                //density[i][j][k].d += M * 315 * (H*H - d)*(H*H - d)*(H*H - d) / (64 * PI*H*H*H*H*H*H*H*H*H); 
                                // density[i][j][k].d++;
                                float thisone = point[a][b][c].d / d;
                                if (thisone > density[i][j][k].d){
                                    density[i][j][k].d = thisone;
                                }
                            }   
                        }
                    }
                }
            }
        }
    }
}

int edge2vertex[12][2] = {
    {0, 1},
    {1, 2},
    {2, 3},
    {3, 0},
    {4, 5},
    {5, 6},
    {6, 7},
    {7, 4},
    {0, 4},
    {1, 5},
    {2, 6},
    {3, 7}
};

void cubecount(int i, int j, int k, float v[8], float pos[8][3]){


    v[0] = density[i][j][k].d;
    v[1] = density[i][j+1][k].d;
    v[2] = density[i+1][j+1][k].d;
    v[3] = density[i+1][j][k].d;
    v[4] = density[i][j][k+1].d;
    v[5] = density[i][j+1][k+1].d;
    v[6] = density[i+1][j+1][k+1].d;
    v[7] = density[i+1][j][k+1].d;

    pos[0][0] = density[i][j][k].x;
    pos[1][0] = density[i][j+1][k].x;
    pos[2][0] = density[i+1][j+1][k].x;
    pos[3][0] = density[i+1][j][k].x;
    pos[4][0] = density[i][j][k+1].x;
    pos[5][0] = density[i][j+1][k+1].x;
    pos[6][0] = density[i+1][j+1][k+1].x;
    pos[7][0] = density[i+1][j][k+1].x;

    pos[0][1] = density[i][j][k].y;
    pos[1][1] = density[i][j+1][k].y;
    pos[2][1] = density[i+1][j+1][k].y;
    pos[3][1] = density[i+1][j][k].y;
    pos[4][1] = density[i][j][k+1].y;
    pos[5][1] = density[i][j+1][k+1].y;
    pos[6][1] = density[i+1][j+1][k+1].y;
    pos[7][1] = density[i+1][j][k+1].y;

    pos[0][2] = density[i][j][k].z;
    pos[1][2] = density[i][j+1][k].z;
    pos[2][2] = density[i+1][j+1][k].z;
    pos[3][2] = density[i+1][j][k].z;
    pos[4][2] = density[i][j][k+1].z;
    pos[5][2] = density[i][j+1][k+1].z;
    pos[6][2] = density[i+1][j+1][k+1].z;
    pos[7][2] = density[i+1][j][k+1].z;
    
}



void draw_face(){
    for (int i=0; i<LEVEL; i++){
    for (int j=0; j<LEVEL; j++){
    for (int k=0; k<LEVEL; k++){
        float vertex[12];
        float pos[12][3];

        cubecount(i, j, k, vertex, pos);
        int ind = 0;
        if (vertex[0] > PP) ind |= 1;
        if (vertex[1] > PP) ind |= 2;
        if (vertex[2] > PP) ind |= 4;
        if (vertex[3] > PP) ind |= 8;
        if (vertex[4] > PP) ind |= 16;
        if (vertex[5] > PP) ind |= 32;
        if (vertex[6] > PP) ind |= 64;
        if (vertex[7] > PP) ind |= 128;

        int flag = edgeTable[ind];
        if (flag!=0)
            cout<<"F"<<" "<<k<<" "<<ind<<" "<<flag<<endl;
        if (flag != 0){
            cout<<"B";
            vector<vector<float> > v(12, vector<float>(3, 0) );
            vector<vector<float> > n(12, vector<float>(3, 0) );
            for (int e=0; e<12; e++){
                if (flag & (1<<e)){
                    // cout<<"C";
                    float v1 = vertex[edge2vertex[e][0]];
                    float v2 = vertex[edge2vertex[e][1]];
                    float x1 = pos[edge2vertex[e][0]][0];
                    float y1 = pos[edge2vertex[e][0]][1];
                    float z1 = pos[edge2vertex[e][0]][2];
                    float x2 = pos[edge2vertex[e][1]][0];
                    float y2 = pos[edge2vertex[e][1]][1];
                    float z2 = pos[edge2vertex[e][1]][2];
                    cout<<e<<endl;
                    v[e][0] = x1 + (PP - v1)*(x2 - x1)/(v2 - v1);
                    v[e][1] = y1 + (PP - v1)*(y2 - y1)/(v2 - v1);
                    v[e][2] = z1 + (PP - v1)*(z2 - z1)/(v2 - v1);
                }
            }
            cout<<"D";
            for (int t=0; t<5; t++){
                if (triTable[ind][t*3]<0)
                    break;
                glBegin(GL_TRIANGLES);
                    cout<<" "<<ind<<endl;
                    glVertex3f(v[triTable[ind][t*3]][0], v[triTable[ind][t*3]][1], v[triTable[ind][t*3]][2]);
                    glVertex3f(v[triTable[ind][t*3+1]][0], v[triTable[ind][t*3+1]][1], v[triTable[ind][t*3+1]][2]);
                    glVertex3f(v[triTable[ind][t*3+2]][0], v[triTable[ind][t*3+2]][1], v[triTable[ind][t*3+2]][2]);
                glEnd();
            }
            cout<<"E";
        }
    }
    }
    }

}